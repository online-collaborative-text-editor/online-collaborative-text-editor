package com.APT.online.collaborative.text.editor.Model;


import lombok.*;
import jakarta.persistence.*;
import org.hibernate.annotations.GenericGenerator;

import java.time.LocalDateTime;
import java.util.List;

@AllArgsConstructor
@NoArgsConstructor
@Setter
@Getter
@ToString

@Entity
@Table(name = "documents")

// @GeneratedValue This annotation is used in conjunction with the @Id annotation to indicate that
// the primary key value will be automatically generated by the persistence provider (like Hibernate).
// The generator attribute specifies the name of the primary key generator to use.

// @GenericGenerator This is a Hibernate-specific annotation used to define a new generator and give it a name.
// Here, itâ€™s defining a generator named "uuid" that uses the "uuid2" strategy.
// The "uuid2" strategy generates UUIDs according to the IETF RFC 4122 standard which is more efficient and safer,
// as it uses cryptographically strong pseudo random number generator.

// @Lob This annotation is used to specify that a persistent property or field should be persisted as a large object
// to a database-supported large object type.
// A large object can be either a large binary value (Blob) or a large character value (Clob).

// Please note that the @Transient annotation is used to indicate that these fields are not to be persisted
// in the database. These fields are only for your convenience when manipulating the objects in your Java code.
// You would need to manually manage these lists (i.e., add/remove elements) based on the changes in the
// UserDocument table.

public class Document {

    @Id
    @GeneratedValue(generator = "uuid")
    @GenericGenerator(name = "uuid", strategy = "uuid2")
    private String id;

    private String documentName;

    @Lob
    @Column(columnDefinition = "LONGBLOB")
    private byte[] data;

    private LocalDateTime createdAt;
    private LocalDateTime lastModifiedAt;

    @OneToMany(mappedBy = "document")
    private List<UserDocument> userDocuments;

    public Document(String documentName, String documentType, byte[] data, LocalDateTime createdAt, LocalDateTime lastModifiedAt) {
        this.documentName = documentName;
        this.data = data;
        this.createdAt = createdAt;
        this.lastModifiedAt = lastModifiedAt;
    }
}

