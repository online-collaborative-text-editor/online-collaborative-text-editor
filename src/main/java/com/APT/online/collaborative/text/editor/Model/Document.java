package com.APT.online.collaborative.text.editor.Model;

import lombok.*;
import jakarta.persistence.*;
import org.hibernate.annotations.GenericGenerator;

import java.time.LocalDateTime;

@AllArgsConstructor
@NoArgsConstructor
@Setter
@Getter
@ToString

@Entity
@Table(name = "databaseFiles")
public class Document {

    @Id
    // @GeneratedValue This annotation is used in conjunction with the @Id annotation to indicate that
    // the primary key value will be automatically generated by the persistence provider (like Hibernate).
    // The generator attribute specifies the name of the primary key generator to use.
    @GeneratedValue(generator = "uuid")
    // @GenericGenerator This is a Hibernate-specific annotation used to define a new generator and give it a name.
    // Here, itâ€™s defining a generator named "uuid" that uses the "uuid2" strategy.
    // The "uuid2" strategy generates UUIDs according to the IETF RFC 4122 standard which is more efficient and safer,
    // as it uses cryptographically strong pseudo random number generator.
    @GenericGenerator(name = "uuid", strategy = "uuid2")
    private String id;

    private String documentName;

    private String documentType;

    // @Lob This annotation is used to specify that a persistent property or field should be persisted as a large object
    // to a database-supported large object type.
    // A large object can be either a large binary value (Blob) or a large character value (Clob).
    @Lob
    private byte[] data;

    private LocalDateTime createdAt;
    private LocalDateTime lastModifiedAt;


    public Document(String documentName, String documentType, byte[] data, LocalDateTime createdAt, LocalDateTime lastModifiedAt) {
        this.documentName = documentName;
        this.documentType = documentType;
        this.data = data;
        this.createdAt = createdAt;
        this.lastModifiedAt = lastModifiedAt;
    }
}
